{"version":3,"sources":["useCheatCodes/utils.ts","useCheatCodes/index.ts","useCheatCodes/useCheatCodes.ts","assets/konami-code.png","components/CodesInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["compareStringArrays","arr1","arr2","every","a","i","toLowerCase","useCheatCodes","cheatCodes","timeout","repeat","useState","activeCheats","setActiveCheats","keystrokes","setKeystrokes","handleKeyDown","event","preventDefault","key","oldKeys","clearKeystrokes","getCheatCodeByName","useCallback","name","filteredCheat","filter","c","length","useEffect","runCheatCode","cheatCode","callback","cheats","code","slice","t","setTimeout","clearTimeout","window","addEventListener","removeEventListener","clearActiveCheats","CodesInfo","displayCodes","map","className","JSON","stringify","src","konamiCode","alt","bgColors","App","setDisplayCodes","backgroundColor","setBackgroundColor","alert","location","href","random","Math","floor","isActive","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8026affb.chunk.js","sourcesContent":["export const compareStringArrays = (arr1: string[], arr2: string[]) =>\n    arr1?.every((a, i) => a && a?.toLowerCase() === arr2[i]?.toLowerCase());\n","import useCheatCodes from './useCheatCodes';\nimport { CheatCode } from './types';\n\nexport type { CheatCode };\nexport default useCheatCodes;\n","import { useState, useEffect, useCallback } from 'react';\nimport { IUseCheatCodes } from './interfaces';\nimport { CheatCode } from './types';\nimport { compareStringArrays } from './utils';\n\nconst useCheatCodes = ({ cheatCodes, timeout = 0, repeat = true }: IUseCheatCodes) => {\n    const [activeCheats, setActiveCheats] = useState<CheatCode[]>([]);\n    const [keystrokes, setKeystrokes] = useState<string[]>([]);\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n        event?.preventDefault();\n        if (event?.key) {\n            setKeystrokes((oldKeys: string[]) => [...oldKeys, event.key]);\n        }\n    };\n\n    const clearActiveCheats = () => {\n        setActiveCheats([]);\n    };\n\n    const clearKeystrokes = () => {\n        setKeystrokes([]);\n    };\n\n    const getCheatCodeByName = useCallback((name: string): CheatCode[] | null => {\n        const filteredCheat = activeCheats?.filter((c: CheatCode) => c?.name === name);\n        return filteredCheat?.length > 0 ? filteredCheat : null;\n    }, [activeCheats]);\n\n    useEffect(() => {\n        const runCheatCode = (cheatCode: CheatCode) => {\n            const { name, callback = () => {} } = cheatCode;\n            const cheatExists = getCheatCodeByName(name);\n            if (!cheatExists) {\n                setActiveCheats((cheats: CheatCode[]) => [...cheats, cheatCode]);\n                callback();\n            } else if (repeat) {\n                callback();\n            }\n            clearKeystrokes();\n        };\n\n        for (let i = 0; i < cheatCodes.length; i += 1) {\n            const { code } = cheatCodes[i] || {};\n            const isCheatValid = compareStringArrays(code, [...keystrokes.slice(-code?.length)]);\n            if (isCheatValid) {\n                runCheatCode(cheatCodes[i]);\n                break;\n            }\n        }\n    }, [keystrokes, cheatCodes, repeat, getCheatCodeByName]);\n\n    useEffect(() => {\n        const clearUserInput = () => timeout && keystrokes.length > 0 && clearKeystrokes();\n        const t = setTimeout(clearUserInput, timeout);\n        return () => clearTimeout(t);\n    }, [timeout, keystrokes]);\n\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        }\n    }, []);\n\n    return {\n        keystrokes,\n        activeCheats,\n        clearKeystrokes,\n        clearActiveCheats,\n        getCheatCodeByName,\n    };\n};\n\nexport default useCheatCodes;\n","export default __webpack_public_path__ + \"static/media/konami-code.27bac845.png\";","import React from 'react';\nimport { CheatCode } from '../useCheatCodes';\nimport konamiCode from '../assets/konami-code.png';\n\nconst CodesInfo = ({ cheatCodes, activeCheats, displayCodes }: ICodesInfo) => {\n  if (!displayCodes) {\n    return <img src={konamiCode} className=\"konami-code\" alt=\"konami-code\" />;\n  }\n  return (\n    <div>\n      <h2>Active Cheats:</h2>\n      {activeCheats?.map(({ name }: { name: string }) => (\n        <pre key={name} className=\"cheat-name\">\n          <code>{`~ ${name} ~`}</code>\n        </pre>\n      ))}\n      <h3>Cheat Codes:</h3>\n      <code className=\"cheat-code\">\n        {JSON.stringify(cheatCodes, null, 2)}\n      </code>\n    </div>\n  )\n};\n\ninterface ICodesInfo {\n  cheatCodes: CheatCode[];\n  activeCheats: CheatCode[];\n  displayCodes: boolean;\n}\n\nexport default CodesInfo;\n","import React, { useEffect, useState } from 'react';\nimport useCheatCodes, { CheatCode } from './useCheatCodes';\nimport CodesInfo from './components/CodesInfo';\n\nconst defaultCode = 'konami';\nconst bgColors = [\n  '#006cd1',\n  '#bc5a00',\n  '#007775',\n  '#750077',\n  '#bc0004',\n  '#42b284',\n];\n\nconst App = () => {\n  const [displayCodes, setDisplayCodes] = useState<boolean>(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>('');\n\n  const cheatCodes: CheatCode[] = [\n    {\n      name: 'konami',\n      code: ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'B', 'A'],\n      // ^ `code` is case insensitive\n    },\n    { \n      name: 'guns',\n      code: ['g', 'u', 'n', 'S', 'G', 'u', 'N', 'S', 'g', 'u', 'n', 's'],\n      callback: () => window.alert('ðŸ”«ðŸ”«ðŸ”«')\n    },\n    {\n      name: '4chan',\n      code: ['4', 'c', 'h', 'a', 'n', 'S', 'U', 'C', 'K', 'S'],\n      callback: () => {\n        window.location.href = 'https://4chan.org/b/'\n      }\n    },\n    {\n      name: 'colors',\n      code: ['c', 'o', 'l', 'o', 'r', 's'],\n      callback: () => {\n        const random = Math.floor(Math.random() * bgColors.length);\n        const color = bgColors[random]\n        setBackgroundColor(color);\n      }\n    },\n  ];\n  const {\n    activeCheats,\n    getCheatCodeByName,\n  } = useCheatCodes({ cheatCodes, repeat: true, timeout: 10000 });\n  \n  // example on handling hook state\n  // replace with `useCallback` so we can pass `getCheatCodeByName()` as dep arr.\n  useEffect(() => {\n    const isActive = getCheatCodeByName(defaultCode);\n    if (!displayCodes && isActive) {\n      setDisplayCodes(true);\n    }\n  }, [activeCheats, displayCodes, getCheatCodeByName]);\n\n  return (\n    <div className=\"app\" style={{ backgroundColor }}>\n      <CodesInfo\n        cheatCodes={cheatCodes}\n        activeCheats={activeCheats}\n        displayCodes={displayCodes}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}